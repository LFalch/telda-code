zero:
    .wide 0
    .wide 0
trap_vector:
    .wide trap_handler

trap_error:
    .string Trap encountered: \0

trap0:
    .string explicit halt\0

trap1:
    .string invalid instruction\0

trap2:
    .string division by zero\0

trap3:
    .string return from handler outside handler\0

traps:
    .wide trap0
    .wide trap1
    .wide trap2
    .wide trap3

trap_handler:
    ctf
    seth 0
    add x, a, traps
    add a, 0, trap_error
    call _write
    load a, 0, x
    call _print
    halt

error_msg:
    .string Did not exit successfully: \0

.ref _write
.ref _print
.ref _uitos

; setting main as global to capture it
.ref main
.global _start
_start:
    seth 4
    call main
    seth 0
    ; keep a (return value) in z for later
    sub z, a, 0
    jez done
    add a, 0, error_msg
    call _write
    ; print return value
    add a, 0, z
    add x, 0, buf
    call _uitos
    add a, 0, buf
    call _print
done:
    halt

buf:
    .string \0\0\0\0\0\0\0\0

# Signed int to string
# Make sure that str is at least log_10(num) long (7 is max for 16-bit ints (remember the final null-byte in the string))
.seg text
_sitos:
    sub r0, r6, r0
    jb _uitos

    # bl = r1l
    ldi r1l, '-'
    store r7, r0, r1l
    ldi r8b, 1
    add r7, r7, r8
    sub r6, r0, r6
    # we can ignore overflow since -MIN_INT wraps to MIN_INT
    # which if interpreted unsigned is actually abs(MIN_INT)
    ; jump _uitos # this jump is unnecessary since these are right after each other

; Make sure that str is at least log_10(num) long (6 is max for 16-bit ints (remember the final null-byte in the string))
_uitos:
    or r8, r6, r0

num_len:
    ldi r9b, 1
    add r7, r7, r9
    ldi r9b, 10
    div r8, r0, r8, r9
    sub r0, r8, r0
    jnz num_len
    ; put the final null byte already
    store r7, r0, r0

loop_IntTos:
    ldi r9b, 1
    sub r7, r7, r9
    ; get the next digit by doing mod 10 and then since that'll be in 0..=9, just adding '0' will convert it to the current character
    ; divide by 10 to get the next number, and just return if the result is zero
    ldi r9b, 10
    div r6, r8, r6, r9
    ldi r9b, '0'
    add r9b, r8b, r9b
    ; then put it into the string and decrement the pointer
    store r7, r0, r9b

    sub r0, r6, r0
    jnz loop_IntTos

    ret

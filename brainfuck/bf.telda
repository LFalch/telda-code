; compiles a brainfuck program from STDIN and writes a binary telda object file to STDOUT
; the program needs to be terminated by a # rn because EOF from STDIN crashes telda rn
; and cannot be detected. This might be fixed later.
; see the Makefile for example usage

.seg text
.entry
compiler:
    ldi r2l, '+'
    ldi r2h, '-'
    ldi r3l, '<'
    ldi r3h, '>'
    ; , (char literal broken)
    ldi r4l, 0x2c
    ldi r4h, '.'
    ldi r5l, '['
    ldi r5h, ']'
    ldi r6b, '#'
    ; r7 arg1; r8 arg2

    ; used to keep track of where the program currently is
    ldi rp, 14
    ; location to load code into
    ldi rf, loaded_code

    ; r9  = [ table pointer

    ldi r9,  0x7ff0

read_code:
    load r1l, r0, 0xffff

    sub r0b, r1l, r6b
    jez compile_step
is_+:
    sub r0b, r1l, r2l
    jnz is_-
    ldi r8b, 9
    add rp, rp, r8
    jmp save_byte
is_-:
    sub r0b, r1l, r2h
    jnz is_<
    ldi r8b, 9
    add rp, rp, r8
    jmp save_byte
is_<:
    sub r0b, r1l, r3l
    jnz is_>
    ldi r8b, 3
    add rp, rp, r8
    jmp save_byte
is_>:
    sub r0b, r1l, r3h
    jnz is_comma
    ldi r8b, 3
    add rp, rp, r8
    jmp save_byte
is_comma:
    sub r0b, r1l, r4l
    jnz is_.
    ldi r8b, 6
    add rp, rp, r8
    jmp save_byte
is_.:
    sub r0b, r1l, r4h
    jnz is_[
    ldi r8b, 6
    add rp, rp, r8
    jmp save_byte
is_[:
    sub r0b, r1l, r5l
    jnz is_]
    push r9
    ldi r8b, 2
    add r9, r9, r8
    ldi r8b, 9
    add rp, rp, r8
    jmp save_byte
is_]:
    sub r0b, r1l, r5h
    jnz read_code
    ldi r8b, 4
    add rp, rp, r8
    pop r8
    store r8, r0, rp
    ; jmp save_byte
save_byte:
    store rf, r0, r1l
    ldi r8b, 1
    add rf, rf, r8

    jmp read_code

; TODO: fix [ and ], dunno what's wrong

compile_step:
    store rf, r0, r6b
    ldi rf, loaded_code

    ldi r10b, 4
    ; load old rp + 1 (for halt) and + 3 (for offset and segment type) into r6 (otherwise it gets overwritten
    add r6, rp, r10

    ldi r7, header_start
    ldi r8b, 25
    call write_n

    store r0, 0xfffe, r6

    ldi r7, header_end
    ldi r8b, 17
    call write_n

    ldi r6, 0x7ff0
    ldi rp, 14

load_and_write_byte:
    ; ret for write_n
    ldi rl, load_and_write_byte

    ; load byte from source code
    ldi r10b, 1
    load r1l, r0, rf
    add rf, rf, r10

check_plus:
    sub r0b, r1l, r2l
    jnz check_minus

    ldi r7, bf_plus
    ldi r8b, 9
    jmp write_n
check_minus:
    sub r0b, r1l, r2h
    jnz check_decp

    ldi r7, bf_minus
    ldi r8b, 9
    jmp write_n
check_decp:
    sub r0b, r1l, r3l
    jnz check_incp

    ldi r7, bf_decp
    ldi r8b, 3
    jmp write_n
check_incp:
    sub r0b, r1l, r3h
    jnz check_in

    ldi r7, bf_incp
    ldi r8b, 3
    jmp write_n
check_in:
    sub r0b, r1l, r4l
    jnz check_out

    ldi r7, bf_in
    ldi r8b, 6
    jmp write_n
check_out:
    sub r0b, r1l, r4h
    jnz check_loop_start

    ldi r7, bf_out
    ldi r8b, 6
    jmp write_n
check_loop_start:
    sub r0b, r1l, r5l
    jnz check_loop_end

    push rp
    ldi r7, bf_loop_start
    ldi r8b, 7
    call write_n
    ldi r8b, 2
    load r1, r0, r6
    add r6, r6, r8
    add rp, rp, r8
    store r0, 0xfffe, r1

    jmp load_and_write_byte
check_loop_end:
    sub r0b, r1l, r5h
    jnz compiler_end

    ldi r7, bf_loop_end
    ldi r8b, 2
    call write_n

    pop r7
    store r0, 0xfffe, r7
    ldi r8b, 2
    add rp, rp, r8

    jmp load_and_write_byte

compiler_end:
    ldi r1h, 0x0a
    store r0, 0xffff, r1h
    store r0, 0xffff, r0b
    ; this is the end
    halt

.include bflib.telda

.seg heap
loaded_code:
    .wide 0
